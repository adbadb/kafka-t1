1. Create topic with replication factor 3

docker exec -ti kafka1 /usr/bin/kafka-topics --create  --bootstrap-server kafka1:19092,kafka2:19093,kafka3:19094 --replication-factor 3 --partitions 4 --topic events_rep3


2. Create topic with replication factor 1

docker exec -ti kafka1 /usr/bin/kafka-topics --create  --bootstrap-server kafka1:19092,kafka2:19093,kafka3:19094 --replication-factor 1 --partitions 4 --topic events_rep1


3. Create test of the producer performance for 

docker exec -ti kafka1  /usr/bin/kafka-producer-perf-test --topic events_rep1 --throughput -1 --num-records 100000 --record-size 1024 --producer-props acks=all bootstrap.servers=kafka1:19092,kafka2:19093,kafka3:19094

4. Create performance test with acks=all

docker exec -ti kafka1  /usr/bin/kafka-producer-perf-test --topic events_rep3 --throughput -1 --num-records 100000 --record-size 1024 --producer-props acks=all bootstrap.servers=kafka1:19092,kafka2:19093,kafka3:19094 

5. Create performance test with acks=1

docker exec -ti kafka1  /usr/bin/kafka-producer-perf-test --topic events_rep3 --throughput -1 --num-records 100000 --record-size 1024 --producer-props acks=1 bootstrap.servers=kafka1:19092,kafka2:19093,kafka3:19094 

6. Create performance test for consumer

docker exec -ti kafka1  /usr/bin/kafka-consumer-perf-test --topic events_rep3 --messages 100000 --bootstrap-server kafka1:19092,kafka2:19093,kafka3:19094 --group t1

7. Create performance test for consumer with bigger fetch size

docker exec -ti kafka1  /usr/bin/kafka-consumer-perf-test --topic events_rep3 --messages 100000 --bootstrap-server kafka1:19092,kafka2:19093,kafka3:19094 --group t2 --fetch-size 2048576

8. Create new topic 

docker exec -ti kafka1 /usr/bin/kafka-topics --create  --bootstrap-server kafka1:19092,kafka2:19093,kafka3:19094 --replication-factor 3 --partitions 4 --topic events_end2end

9. Check end to end latency

docker exec -ti kafka1  /usr/bin/kafka-run-class kafka.tools.EndToEndLatency kafka1:19092,kafka2:19093,kafka3:19094 events_end2end 10000 1 1024

